{"version":3,"sources":["containers/homepage.module.scss","components/task/task.jsx","utils/generateUuid.js","containers/homepage.jsx","App.js","serviceWorker.js","index.js","components/task/task.module.scss"],"names":["module","exports","task","props","className","styles","taskContainer","ProgressBar","progressbar","now","data","progress","label","Button","onClick","onRemove","disabled","isAssigned","deleteBtn","alt","style","fontSize","color","helpText","createUUID","dt","Date","getTime","replace","c","r","Math","random","floor","toString","ServerPage","state","servers","tasks","noOfTasks","this","addServer","event","setState","parseInt","target","value","addTasks","slice","push","serverId","eventLoop","serverIndex","findIndex","item","splice","i","taskId","taskIndex","taskInProgress","setInterval","taskProgressIncrease","setTimeout","endTask","taskProcess","clearInterval","idleServers","filter","unassignedTasks","length","forEach","index","elem","beginTask","container","heading","subHeading","variant","addServerBtn","serversContainer","map","key","serverBlock","removeServerBtn","removeServer","addTasksBlock","taskNumberInput","type","onChange","onChangeTasksInput","addTaskBtn","onAddTasks","tasksContainer","removeTask","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,QAAU,0BAA0B,WAAa,6BAA6B,iBAAmB,mCAAmC,YAAc,8BAA8B,WAAa,6BAA6B,cAAgB,gCAAgC,gBAAkB,kCAAkC,eAAiB,mC,+TCgC1XC,EA3BF,SAACC,GACZ,OACE,yBAAKC,UAAWC,IAAOC,eACrB,kBAACC,EAAA,EAAD,CACEH,UAAWC,IAAOG,YAClBC,IAAKN,EAAMO,KAAKC,SAChBC,MAAK,UAAKT,EAAMO,KAAKC,SAAhB,OAEP,kBAACE,EAAA,EAAD,CACEC,QAASX,EAAMY,SACfC,SAAUb,EAAMO,KAAKO,WACrBb,UAAWC,IAAOa,WAElB,kBAAC,IAAD,CACEC,IAAI,aACJC,MAAO,CAAEC,SAAU,OAAQC,MAAO,YAGrCnB,EAAMO,KAAKO,WACV,GAEA,uBAAGb,UAAWC,IAAOkB,UAArB,gB,iBC3BKC,EAAa,WACxB,IAAIC,GAAK,IAAIC,MAAOC,UASpB,MARa,uCAAuCC,QAClD,SACA,SAAUC,GACR,IAAMC,GAAKL,EAAqB,GAAhBM,KAAKC,UAAiB,GAAK,EAE3C,OADAP,EAAKM,KAAKE,MAAMR,EAAK,KACR,KAALI,EAAWC,EAAS,EAAJA,EAAW,GAAKI,SAAS,QC4MxCC,E,4MA7LbC,MAAQ,CACNC,QAAS,GACTC,MAAO,GACPC,UAAW,G,kEAIXC,KAAKC,c,yCAGYC,GACjBF,KAAKG,SAAS,CAAEJ,UAAWK,SAASF,EAAMG,OAAOC,W,mCAIjDN,KAAKO,SAASP,KAAKJ,MAAMG,WACzBC,KAAKG,SAAS,CAAEJ,UAAW,M,kCAGhB,IAAD,OACJF,EAAUG,KAAKJ,MAAMC,QAAQW,QACnCX,EAAQY,KAAK,CAAEC,SAAU1B,IAActB,KAAM,OAC7CsC,KAAKG,SAAS,CAAEN,QAASA,IAAW,WAClC,EAAKc,iB,mCAIID,GACX,IAAMb,EAAUG,KAAKJ,MAAMC,QAAQW,QAC7BI,EAAcf,EAAQgB,WAAU,SAACC,GAAD,OAAUA,EAAKJ,WAAaA,KAClEb,EAAQkB,OAAOH,EAAa,GAC5BZ,KAAKG,SAAS,CAAEN,QAASA,M,+BAGlBE,GAEP,IAFmB,IAAD,OACZD,EAAQE,KAAKJ,MAAME,MAAMU,QACtBQ,EAAI,EAAGA,EAAIjB,EAAWiB,IAC7BlB,EAAMW,KAAK,CAAEQ,OAAQjC,IAAcP,YAAY,EAAON,SAAU,IAElE6B,KAAKG,SAAS,CAAEL,MAAOA,IAAS,WAC9B,EAAKa,iB,iCAIEM,GACT,IAAMnB,EAAQE,KAAKJ,MAAME,MAAMU,QACzBU,EAAYpB,EAAMe,WAAU,SAACC,GAAD,OAAUA,EAAKG,SAAWA,KAC5DnB,EAAMiB,OAAOG,EAAW,GACxBlB,KAAKG,SAAS,CAAEL,MAAOA,M,2CAGJmB,GACnB,IAAMC,EAAYlB,KAAKJ,MAAME,MAAMe,WACjC,SAACC,GAAD,OAAUA,EAAKG,SAAWA,KAEtBnB,EAAQE,KAAKJ,MAAME,MAAMU,SAC1BV,EAAMoB,IAAcpB,EAAMoB,GAAW/C,UAAY,MAGtD2B,EAAMoB,GAAW/C,UAAY,EAC7B6B,KAAKG,SAAS,CAAEL,MAAOA,O,gCAGfmB,GAAS,IAAD,OACZE,EAAiBC,aACnB,SAACH,GACC,EAAKI,qBAAqBJ,KAE5B,IACAA,GAEFK,YAAW,WACT,EAAKC,QAAQJ,EAAgBF,KAC5B,O,8BAGGO,EAAaP,GAAS,IAAD,OAC3BQ,cAAcD,GACd,IAAMN,EAAYlB,KAAKJ,MAAME,MAAMe,WACjC,SAACC,GAAD,OAAUA,EAAKG,SAAWA,KAEtBL,EAAcZ,KAAKJ,MAAMC,QAAQgB,WACrC,SAACC,GAAD,OAAUA,EAAKpD,OAASuD,KAEpBnB,EAAQE,KAAKJ,MAAME,MAAMU,QAC/BV,EAAMiB,OAAOG,EAAW,GACxB,IAAMrB,EAAUG,KAAKJ,MAAMC,QAAQW,QACnCX,EAAQe,GAAalD,KAAO,KAE5BsC,KAAKG,SAAS,CAAEL,MAAOA,EAAOD,QAASA,IAAW,WAChD,EAAKc,iB,kCAII,IAAD,OACNd,EAAUG,KAAKJ,MAAMC,QAAQW,QAC7BV,EAAQE,KAAKJ,MAAME,MAAMU,QACvBkB,EAAc7B,EAAQ8B,QAAO,SAACb,GAAD,OAAwB,OAAdA,EAAKpD,QAC5CkE,EAAkB9B,EAAM6B,QAAO,SAACb,GAAD,OAAWA,EAAKrC,cAEhDiD,EAAYG,QAAWD,EAAgBC,QAI5CH,EAAYI,SAAQ,SAAChB,EAAMiB,GACzB,IAAMb,EAAYpB,EAAMe,WACtB,SAACmB,GAAD,OAAUA,EAAKf,SAAWW,EAAgBG,GAAOd,UAE7CL,EAAcf,EAAQgB,WAC1B,SAACmB,GAAD,OAAUlB,EAAKJ,WAAasB,EAAKtB,YAEnCb,EAAQkB,OAAOH,EAAa,EAAG,CAC7BF,SAAUI,EAAKJ,SACfhD,KAAMkE,EAAgBG,GAAOd,SAE/BnB,EAAMiB,OAAOG,EAAW,EAAG,CACzBD,OAAQW,EAAgBG,GAAOd,OAC/BxC,YAAY,EACZN,SAAU,IAEZ,EAAKgC,SAAS,CAAEN,QAASA,EAASC,MAAOA,IAAS,WAChD,EAAKmC,UAAUL,EAAgBG,GAAOd,gB,+BAKlC,IAAD,SACoBjB,KAAKJ,MAAxBC,EADD,EACCA,QAASC,EADV,EACUA,MACjB,OACE,yBAAKlC,UAAWC,IAAOqE,WACrB,wBAAItE,UAAWC,IAAOsE,SAAtB,gBACA,wBAAIvE,UAAWC,IAAOuE,YAAtB,WACA,kBAAC/D,EAAA,EAAD,CACEgE,QAAQ,UACRzE,UAAWC,IAAOyE,aAClBhE,QAAS,kBAAM,EAAK2B,aACpBzB,SAAUqB,EAAQgC,OAAS,GAJ7B,cAQA,yBAAKjE,UAAWC,IAAO0E,kBACpB1C,EAAQ2C,KAAI,SAAC1B,EAAMiB,GAAP,OACX,yBAAKU,IAAK3B,EAAKJ,SAAWqB,EAAOnE,UAAWC,IAAO6E,aACjD,kBAAC,IAAD,CACE/D,IAAI,aACJC,MAAO,CAAEC,SAAU,QAASC,MAAO,UAErC,2BAAIgC,EAAKpD,KAAO,YAAc,QAE9B,kBAACW,EAAA,EAAD,CACET,UAAWC,IAAO8E,gBAClBrE,QAAS,kBAAM,EAAKsE,aAAa9B,EAAKJ,WACtClC,SAAUqB,EAAQgC,OAAS,GAAKf,EAAKpD,MAHvC,sBAUN,wBAAIE,UAAWC,IAAOuE,YAAtB,SACA,yBAAKxE,UAAWC,IAAOgF,eACrB,2BACEjF,UAAWC,IAAOiF,gBAClBC,KAAK,SACLzC,MAAON,KAAKJ,MAAMG,UAClBiD,SAAU,SAAC9C,GAAD,OAAW,EAAK+C,mBAAmB/C,MAE/C,kBAAC7B,EAAA,EAAD,CACET,UAAWC,IAAOqF,WAClB5E,QAAS,kBAAM,EAAK6E,cACpB3E,UAAWwB,KAAKJ,MAAMG,WAHxB,cAQF,yBAAKnC,UAAWC,IAAOuF,gBACpBtD,EAAM0C,KAAI,SAAC1B,GAAD,OACT,kBAAC,EAAD,CACE2B,IAAK3B,EAAKG,OACV/C,KAAM4C,EACNvC,SAAU,kBAAM,EAAK8E,WAAWvC,EAAKG,oB,GArL1BqC,IAAMC,WCNhBC,MARf,WACE,OACE,yBAAK5F,UAAU,OACb,kBAAC,EAAD,QCEc6F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BpH,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,YAAc,0BAA0B,UAAY,wBAAwB,SAAW,0B","file":"static/js/main.73f04e4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"homepage_container__OPiAt\",\"heading\":\"homepage_heading__uP8q2\",\"subHeading\":\"homepage_subHeading__2o6dl\",\"serversContainer\":\"homepage_serversContainer__MbBcm\",\"serverBlock\":\"homepage_serverBlock__oz4QM\",\"serverIcon\":\"homepage_serverIcon__2NXg7\",\"addTasksBlock\":\"homepage_addTasksBlock__8yed0\",\"taskNumberInput\":\"homepage_taskNumberInput__2iwfX\",\"tasksContainer\":\"homepage_tasksContainer__3Y4GO\"};","import React from \"react\";\r\nimport { Button, ProgressBar } from \"react-bootstrap\";\r\nimport styles from \"./task.module.scss\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst task = (props) => {\r\n  return (\r\n    <div className={styles.taskContainer}>\r\n      <ProgressBar\r\n        className={styles.progressbar}\r\n        now={props.data.progress}\r\n        label={`${props.data.progress}%`}\r\n      />\r\n      <Button\r\n        onClick={props.onRemove}\r\n        disabled={props.data.isAssigned}\r\n        className={styles.deleteBtn}\r\n      >\r\n        <DeleteIcon\r\n          alt=\"Server_SVG\"\r\n          style={{ fontSize: \"24px\", color: \"white\" }}\r\n        />\r\n      </Button>\r\n      {props.data.isAssigned ? (\r\n        \"\"\r\n      ) : (\r\n        <p className={styles.helpText}>Waiting...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default task;\r\n","export const createUUID = () => {\r\n  let dt = new Date().getTime();\r\n  const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\r\n    /[xy]/g,\r\n    function (c) {\r\n      const r = (dt + Math.random() * 16) % 16 | 0;\r\n      dt = Math.floor(dt / 16);\r\n      return (c == \"x\" ? r : (r & 0x3) | 0x8).toString(16);\r\n    }\r\n  );\r\n  return uuid;\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./homepage.module.scss\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\nimport Task from \"../components/task/task\";\r\nimport DesktopMacIcon from \"@material-ui/icons/DesktopMac\";\r\n\r\nimport { createUUID } from \"../utils/generateUuid\";\r\n\r\n// for help as TypeScript is not being used\r\n// serverType = {\r\n//     serverId: Number,\r\n//     task: number | null,\r\n// }\r\n\r\n// taskType = {\r\n//     taskId: Number,\r\n//     isAssigned: Boolean,\r\n//     progress: number\r\n// }\r\n\r\nclass ServerPage extends React.Component {\r\n  state = {\r\n    servers: [],\r\n    tasks: [],\r\n    noOfTasks: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.addServer();\r\n  }\r\n\r\n  onChangeTasksInput(event) {\r\n    this.setState({ noOfTasks: parseInt(event.target.value) });\r\n  }\r\n\r\n  onAddTasks() {\r\n    this.addTasks(this.state.noOfTasks);\r\n    this.setState({ noOfTasks: 0 });\r\n  }\r\n\r\n  addServer() {\r\n    const servers = this.state.servers.slice();\r\n    servers.push({ serverId: createUUID(), task: null });\r\n    this.setState({ servers: servers }, () => {\r\n      this.eventLoop();\r\n    });\r\n  }\r\n\r\n  removeServer(serverId) {\r\n    const servers = this.state.servers.slice();\r\n    const serverIndex = servers.findIndex((item) => item.serverId === serverId);\r\n    servers.splice(serverIndex, 1);\r\n    this.setState({ servers: servers });\r\n  }\r\n\r\n  addTasks(noOfTasks) {\r\n    const tasks = this.state.tasks.slice();\r\n    for (let i = 0; i < noOfTasks; i++) {\r\n      tasks.push({ taskId: createUUID(), isAssigned: false, progress: 0 });\r\n    }\r\n    this.setState({ tasks: tasks }, () => {\r\n      this.eventLoop();\r\n    });\r\n  }\r\n\r\n  removeTask(taskId) {\r\n    const tasks = this.state.tasks.slice();\r\n    const taskIndex = tasks.findIndex((item) => item.taskId === taskId);\r\n    tasks.splice(taskIndex, 1);\r\n    this.setState({ tasks: tasks });\r\n  }\r\n\r\n  taskProgressIncrease(taskId) {\r\n    const taskIndex = this.state.tasks.findIndex(\r\n      (item) => item.taskId === taskId\r\n    );\r\n    const tasks = this.state.tasks.slice();\r\n    if (!tasks[taskIndex] || tasks[taskIndex].progress >= 100) {\r\n      return;\r\n    }\r\n    tasks[taskIndex].progress += 1;\r\n    this.setState({ tasks: tasks });\r\n  }\r\n\r\n  beginTask(taskId) {\r\n    let taskInProgress = setInterval(\r\n      (taskId) => {\r\n        this.taskProgressIncrease(taskId);\r\n      },\r\n      200,\r\n      taskId\r\n    );\r\n    setTimeout(() => {\r\n      this.endTask(taskInProgress, taskId);\r\n    }, 20000);\r\n  }\r\n\r\n  endTask(taskProcess, taskId) {\r\n    clearInterval(taskProcess);\r\n    const taskIndex = this.state.tasks.findIndex(\r\n      (item) => item.taskId === taskId\r\n    );\r\n    const serverIndex = this.state.servers.findIndex(\r\n      (item) => item.task === taskId\r\n    );\r\n    const tasks = this.state.tasks.slice();\r\n    tasks.splice(taskIndex, 1);\r\n    const servers = this.state.servers.slice();\r\n    servers[serverIndex].task = null;\r\n\r\n    this.setState({ tasks: tasks, servers: servers }, () => {\r\n      this.eventLoop();\r\n    });\r\n  }\r\n\r\n  eventLoop() {\r\n    let servers = this.state.servers.slice();\r\n    let tasks = this.state.tasks.slice();\r\n    const idleServers = servers.filter((item) => item.task === null);\r\n    const unassignedTasks = tasks.filter((item) => !item.isAssigned);\r\n\r\n    if (!idleServers.length || !unassignedTasks.length) {\r\n      return;\r\n    }\r\n\r\n    idleServers.forEach((item, index) => {\r\n      const taskIndex = tasks.findIndex(\r\n        (elem) => elem.taskId === unassignedTasks[index].taskId\r\n      );\r\n      const serverIndex = servers.findIndex(\r\n        (elem) => item.serverId === elem.serverId\r\n      );\r\n      servers.splice(serverIndex, 1, {\r\n        serverId: item.serverId,\r\n        task: unassignedTasks[index].taskId,\r\n      });\r\n      tasks.splice(taskIndex, 1, {\r\n        taskId: unassignedTasks[index].taskId,\r\n        isAssigned: true,\r\n        progress: 0,\r\n      });\r\n      this.setState({ servers: servers, tasks: tasks }, () => {\r\n        this.beginTask(unassignedTasks[index].taskId);\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { servers, tasks } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <h1 className={styles.heading}>Task Manager</h1>\r\n        <h2 className={styles.subHeading}>Servers</h2>\r\n        <Button\r\n          variant=\"primary\"\r\n          className={styles.addServerBtn}\r\n          onClick={() => this.addServer()}\r\n          disabled={servers.length > 9}\r\n        >\r\n          Add Server\r\n        </Button>\r\n        <div className={styles.serversContainer}>\r\n          {servers.map((item, index) => (\r\n            <div key={item.serverId + index} className={styles.serverBlock}>\r\n              <DesktopMacIcon\r\n                alt=\"Server_SVG\"\r\n                style={{ fontSize: \"100px\", color: \"grey\" }}\r\n              />\r\n              <p>{item.task ? \"Working..\" : \"Idle\"}</p>\r\n\r\n              <Button\r\n                className={styles.removeServerBtn}\r\n                onClick={() => this.removeServer(item.serverId)}\r\n                disabled={servers.length < 2 || item.task}\r\n              >\r\n                Remove Server\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <h2 className={styles.subHeading}>Tasks</h2>\r\n        <div className={styles.addTasksBlock}>\r\n          <input\r\n            className={styles.taskNumberInput}\r\n            type=\"number\"\r\n            value={this.state.noOfTasks}\r\n            onChange={(event) => this.onChangeTasksInput(event)}\r\n          />\r\n          <Button\r\n            className={styles.addTaskBtn}\r\n            onClick={() => this.onAddTasks()}\r\n            disabled={!this.state.noOfTasks}\r\n          >\r\n            Add Tasks\r\n          </Button>\r\n        </div>\r\n        <div className={styles.tasksContainer}>\r\n          {tasks.map((item) => (\r\n            <Task\r\n              key={item.taskId}\r\n              data={item}\r\n              onRemove={() => this.removeTask(item.taskId)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ServerPage;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport \"./styles/normalize.scss\";\r\nimport \"./styles/override.scss\";\r\n\r\nimport ServerPage from \"./containers/homepage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ServerPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// Importing the Bootstrap CSS\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskContainer\":\"task_taskContainer__1UH5Z\",\"progressbar\":\"task_progressbar__3vAy6\",\"deleteBtn\":\"task_deleteBtn__fY35z\",\"helpText\":\"task_helpText__7fbLX\"};"],"sourceRoot":""}